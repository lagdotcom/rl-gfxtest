{
  "version": 3,
  "sources": ["globalExternal:wglt", "../src/RGB.ts", "../src/AnnoyingText.ts", "../src/Engine.ts", "../src/GradientRun.ts", "../src/lerp.ts", "../src/PlasmaBall.ts", "../src/index.ts"],
  "sourcesContent": ["module.exports = globalThis.wglt", "type RGB = [r: number, g: number, b: number];\r\nexport default RGB;\r\n\r\nexport const Black: RGB = [0, 0, 0];\r\n\r\nexport const Red: RGB = [255, 0, 0];\r\nexport const Green: RGB = [0, 255, 0];\r\nexport const Blue: RGB = [0, 0, 255];\r\n\r\nexport const Yellow: RGB = [255, 255, 0];\r\nexport const Cyan: RGB = [0, 255, 255];\r\n\r\nexport const White: RGB = [255, 255, 255];\r\n", "import { Colors, Terminal } from \"wglt\";\r\n\r\nimport Drawable from \"./Drawable\";\r\n\r\nexport default class AnnoyingText implements Drawable {\r\n  flash: boolean;\r\n\r\n  constructor(\r\n    public term: Terminal,\r\n    public x: number,\r\n    public y: number,\r\n    public text: string\r\n  ) {\r\n    this.flash = false;\r\n  }\r\n\r\n  draw() {\r\n    this.flash = !this.flash;\r\n\r\n    this.term.drawCenteredString(\r\n      this.x,\r\n      this.y,\r\n      this.text,\r\n      this.flash ? Colors.WHITE : Colors.LIGHT_CYAN\r\n    );\r\n  }\r\n}\r\n", "import { RNG, Terminal } from \"wglt\";\r\n\r\nimport Drawable from \"./Drawable\";\r\n\r\nexport default class Engine {\r\n  rng: RNG;\r\n\r\n  constructor(public term: Terminal, public objects: Drawable[] = []) {\r\n    this.rng = new RNG(Date.now());\r\n    term.update = this.onUpdate.bind(this);\r\n  }\r\n\r\n  add(object: Drawable): this {\r\n    this.objects.push(object);\r\n    return this;\r\n  }\r\n\r\n  onUpdate() {\r\n    this.term.fillRect(\r\n      0,\r\n      0,\r\n      this.term.width,\r\n      this.term.height,\r\n      \" \",\r\n      undefined,\r\n      0\r\n    );\r\n    for (const thing of this.objects) thing.draw();\r\n  }\r\n}\r\n", "import RGB from \"./RGB\";\r\nimport { fromRgb } from \"wglt\";\r\nimport lerp from \"./lerp\";\r\n\r\ntype GradientPoint = [breakpoint: number, rgb: RGB];\r\n\r\nexport default class GradientRun {\r\n  constructor(public points: GradientPoint[]) {\r\n    this.sort();\r\n  }\r\n\r\n  private sort() {\r\n    this.points.sort(([a], [b]) => a - b);\r\n  }\r\n\r\n  add(breakpoint: number, rgb: RGB): this {\r\n    this.points.push([breakpoint, rgb]);\r\n    this.sort();\r\n    return this;\r\n  }\r\n\r\n  get(value: number) {\r\n    const [low, lowColour] = this.points[0];\r\n    if (value <= low) return fromRgb(...lowColour);\r\n\r\n    const [high, highColour] = this.points[this.points.length - 1];\r\n    if (value >= high) return fromRgb(...highColour);\r\n\r\n    const higherIndex = this.points.findIndex(([p]) => p > value);\r\n    const [below, [ar, ag, ab]] = this.points[higherIndex - 1];\r\n    const [above, [br, bg, bb]] = this.points[higherIndex];\r\n\r\n    const r = (value - below) / (above - below);\r\n    return fromRgb(lerp(ar, br, r), lerp(ag, bg, r), lerp(ab, bb, r));\r\n  }\r\n}\r\n", "export default function lerp(x: number, y: number, a: number) {\r\n  return (1 - a) * x + a * y;\r\n}\r\n", "import { Black, Blue, Cyan, White } from \"./RGB\";\r\n\r\nimport Engine from \"./Engine\";\r\nimport GradientRun from \"./GradientRun\";\r\n\r\nfunction int(n: number) {\r\n  return Math.round(n);\r\n}\r\n\r\nfunction nextCoord(x: number, y: number, angle: number): [number, number] {\r\n  const sx = int(x);\r\n  const sy = int(y);\r\n\r\n  const ca = Math.cos(angle);\r\n  const sa = Math.sin(angle);\r\n\r\n  let cx = x;\r\n  let cy = y;\r\n  while (true) {\r\n    cx += ca;\r\n    cy += sa;\r\n\r\n    if (int(cx) != sx || int(cy) != sy) return [cx, cy];\r\n  }\r\n}\r\n\r\nfunction getKey(x: number, y: number) {\r\n  return x * 1000 + y;\r\n}\r\n\r\nfunction getXY(key: number): [number, number] {\r\n  return [Math.floor(key / 1000), key % 1000];\r\n}\r\n\r\nconst defaultGradient = new GradientRun([\r\n  [0, Black],\r\n  [1, Blue],\r\n  [2, Cyan],\r\n  [4, White],\r\n]);\r\n\r\nexport default class PlasmaBall {\r\n  values: Map<number, number>;\r\n\r\n  constructor(\r\n    public g: Engine,\r\n    public x: number,\r\n    public y: number,\r\n    public power = 12,\r\n    public gradient = defaultGradient\r\n  ) {\r\n    this.values = new Map();\r\n  }\r\n\r\n  float() {\r\n    return this.g.rng.nextFloat();\r\n  }\r\n  range(min: number, max: number) {\r\n    return this.g.rng.nextRange(min, max);\r\n  }\r\n\r\n  poke(x: number, y: number, power: number) {\r\n    const key = getKey(int(x), int(y));\r\n    const old = this.values.get(key);\r\n\r\n    this.values.set(key, Math.max(old || 0, power));\r\n  }\r\n\r\n  draw() {\r\n    this.values.clear();\r\n\r\n    let angle = this.float() * 3;\r\n    const arcs = this.range(3, 5);\r\n\r\n    for (let i = 0; i < arcs; i++) {\r\n      this.arc(\r\n        this.x,\r\n        this.y,\r\n        this.power / arcs,\r\n        angle,\r\n        (this.float() - 0.5) / 3\r\n      );\r\n      angle += 1 + this.float() * 2;\r\n    }\r\n\r\n    for (const [key, power] of this.values) {\r\n      const [x, y] = getXY(key);\r\n      this.g.term.drawChar(x, y, \" \", undefined, this.gradient.get(power));\r\n    }\r\n  }\r\n\r\n  arc(x: number, y: number, power: number, angle: number, drift: number) {\r\n    if (power <= 0) return;\r\n    this.poke(x, y, power);\r\n\r\n    angle += drift;\r\n    const [nx, ny] = nextCoord(x, y, angle);\r\n\r\n    if (this.float() < 0.2) {\r\n      // split!\r\n      const mod = this.float();\r\n      power *= 0.6;\r\n\r\n      this.arc(nx, ny, power, angle - mod, -drift);\r\n      angle += mod;\r\n    }\r\n\r\n    const drain = this.float();\r\n    this.arc(nx, ny, power - drain, angle, drift);\r\n  }\r\n}\r\n", "import { Black, Green, Red, White, Yellow } from \"./RGB\";\r\n\r\nimport AnnoyingText from \"./AnnoyingText\";\r\nimport Engine from \"./Engine\";\r\nimport GradientRun from \"./GradientRun\";\r\nimport PlasmaBall from \"./PlasmaBall\";\r\nimport { Terminal } from \"wglt\";\r\n\r\nfunction loadEngine(parent: HTMLElement) {\r\n  const cols = 60;\r\n  const rows = 40;\r\n\r\n  const container = document.createElement(\"div\");\r\n  parent.appendChild(container);\r\n  const onResize = () => {\r\n    const wantWidth = cols * 8;\r\n    const wantHeight = rows * 8;\r\n\r\n    const ratioWidth = Math.floor(window.innerWidth / wantWidth);\r\n    const ratioHeight = Math.floor(window.innerHeight / wantHeight);\r\n    const ratio = Math.min(ratioWidth, ratioHeight);\r\n\r\n    container.style.width = `${wantWidth * ratio}px`;\r\n    container.style.height = `${wantHeight * ratio}px`;\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  onResize();\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  container.appendChild(canvas);\r\n\r\n  const term = new Terminal(canvas, cols, rows, { maxFps: 10 });\r\n  const g = new Engine(term);\r\n  g.add(new PlasmaBall(g, cols / 4 - 5, rows / 2 - 5));\r\n  g.add(\r\n    new PlasmaBall(\r\n      g,\r\n      (cols / 4) * 2,\r\n      rows / 2 + 5,\r\n      12,\r\n      new GradientRun([\r\n        [0, Black],\r\n        [1, Red],\r\n        [2, Yellow],\r\n        [4, White],\r\n      ])\r\n    )\r\n  );\r\n  g.add(\r\n    new PlasmaBall(\r\n      g,\r\n      (cols / 4) * 3 + 5,\r\n      rows / 2 - 5,\r\n      12,\r\n      new GradientRun([\r\n        [0, Black],\r\n        [1, Green],\r\n        [2, Yellow],\r\n        [4, White],\r\n      ])\r\n    )\r\n  );\r\n  g.add(new AnnoyingText(term, cols / 2, 4, \"!! ELECTRO RAVE !!\"));\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => loadEngine(document.body));\r\n"],
  "mappings": "+gBAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAA,EAAO,QAAU,WAAW,OCGrB,IAAMC,EAAa,CAAC,EAAG,EAAG,CAAC,EAErBC,EAAW,CAAC,IAAK,EAAG,CAAC,EACrBC,EAAa,CAAC,EAAG,IAAK,CAAC,EACvBC,EAAY,CAAC,EAAG,EAAG,GAAG,EAEtBC,EAAc,CAAC,IAAK,IAAK,CAAC,EAC1BC,EAAY,CAAC,EAAG,IAAK,GAAG,EAExBC,EAAa,CAAC,IAAK,IAAK,GAAG,ECZxC,IAAAC,EAAiC,OAIZC,EAArB,KAAsD,CAGpD,YACSC,EACAC,EACAC,EACAC,EACP,CAJO,UAAAH,EACA,OAAAC,EACA,OAAAC,EACA,UAAAC,EAEP,KAAK,MAAQ,EACf,CAEA,MAAO,CACL,KAAK,MAAQ,CAAC,KAAK,MAEnB,KAAK,KAAK,mBACR,KAAK,EACL,KAAK,EACL,KAAK,KACL,KAAK,MAAQ,SAAO,MAAQ,SAAO,UACrC,CACF,CACF,EC1BA,IAAAC,EAA8B,OAITC,EAArB,KAA4B,CAG1B,YAAmBC,EAAuBC,EAAsB,CAAC,EAAG,CAAjD,UAAAD,EAAuB,aAAAC,EACxC,KAAK,IAAM,IAAI,MAAI,KAAK,IAAI,CAAC,EAC7BD,EAAK,OAAS,KAAK,SAAS,KAAK,IAAI,CACvC,CAEA,IAAIE,EAAwB,CAC1B,YAAK,QAAQ,KAAKA,CAAM,EACjB,IACT,CAEA,UAAW,CACT,KAAK,KAAK,SACR,EACA,EACA,KAAK,KAAK,MACV,KAAK,KAAK,OACV,IACA,OACA,CACF,EACA,QAAWC,KAAS,KAAK,QAASA,EAAM,KAAK,CAC/C,CACF,EC5BA,IAAAC,EAAwB,OCDT,SAARC,EAAsBC,EAAWC,EAAWC,EAAW,CAC5D,OAAQ,EAAIA,GAAKF,EAAIE,EAAID,CAC3B,CDIA,IAAqBE,EAArB,KAAiC,CAC/B,YAAmBC,EAAyB,CAAzB,YAAAA,EACjB,KAAK,KAAK,CACZ,CAEQ,MAAO,CACb,KAAK,OAAO,KAAK,CAAC,CAACC,CAAC,EAAG,CAACC,CAAC,IAAMD,EAAIC,CAAC,CACtC,CAEA,IAAIC,EAAoBC,EAAgB,CACtC,YAAK,OAAO,KAAK,CAACD,EAAYC,CAAG,CAAC,EAClC,KAAK,KAAK,EACH,IACT,CAEA,IAAIC,EAAe,CACjB,GAAM,CAACC,EAAKC,CAAS,EAAI,KAAK,OAAO,CAAC,EACtC,GAAIF,GAASC,EAAK,SAAO,WAAQ,GAAGC,CAAS,EAE7C,GAAM,CAACC,EAAMC,CAAU,EAAI,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAC7D,GAAIJ,GAASG,EAAM,SAAO,WAAQ,GAAGC,CAAU,EAE/C,IAAMC,EAAc,KAAK,OAAO,UAAU,CAAC,CAACC,CAAC,IAAMA,EAAIN,CAAK,EACtD,CAACO,EAAO,CAACC,EAAIC,EAAIC,CAAE,CAAC,EAAI,KAAK,OAAOL,EAAc,CAAC,EACnD,CAACM,EAAO,CAACC,EAAIC,EAAIC,CAAE,CAAC,EAAI,KAAK,OAAOT,CAAW,EAE/CU,GAAKf,EAAQO,IAAUI,EAAQJ,GACrC,SAAO,WAAQS,EAAKR,EAAII,EAAIG,CAAC,EAAGC,EAAKP,EAAII,EAAIE,CAAC,EAAGC,EAAKN,EAAII,EAAIC,CAAC,CAAC,CAClE,CACF,EE9BA,SAASE,EAAI,EAAW,CACtB,OAAO,KAAK,MAAM,CAAC,CACrB,CAEA,SAASC,EAAUC,EAAWC,EAAWC,EAAiC,CACxE,IAAMC,EAAKL,EAAIE,CAAC,EACVI,EAAKN,EAAIG,CAAC,EAEVI,EAAK,KAAK,IAAIH,CAAK,EACnBI,EAAK,KAAK,IAAIJ,CAAK,EAErBK,EAAKP,EACLQ,EAAKP,EACT,OAIE,GAHAM,GAAMF,EACNG,GAAMF,EAEFR,EAAIS,CAAE,GAAKJ,GAAML,EAAIU,CAAE,GAAKJ,EAAI,MAAO,CAACG,EAAIC,CAAE,CAEtD,CAEA,SAASC,EAAOT,EAAWC,EAAW,CACpC,OAAOD,EAAI,IAAOC,CACpB,CAEA,SAASS,EAAMC,EAA+B,CAC5C,MAAO,CAAC,KAAK,MAAMA,EAAM,GAAI,EAAGA,EAAM,GAAI,CAC5C,CAEA,IAAMC,EAAkB,IAAIC,EAAY,CACtC,CAAC,EAAGC,CAAK,EACT,CAAC,EAAGC,CAAI,EACR,CAAC,EAAGC,CAAI,EACR,CAAC,EAAGC,CAAK,CACX,CAAC,EAEoBC,EAArB,KAAgC,CAG9B,YACSC,EACAnB,EACAC,EACAmB,EAAQ,GACRC,EAAWT,EAClB,CALO,OAAAO,EACA,OAAAnB,EACA,OAAAC,EACA,WAAAmB,EACA,cAAAC,EAEP,KAAK,OAAS,IAAI,GACpB,CAEA,OAAQ,CACN,OAAO,KAAK,EAAE,IAAI,UAAU,CAC9B,CACA,MAAMC,EAAaC,EAAa,CAC9B,OAAO,KAAK,EAAE,IAAI,UAAUD,EAAKC,CAAG,CACtC,CAEA,KAAKvB,EAAWC,EAAWmB,EAAe,CACxC,IAAMT,EAAMF,EAAOX,EAAIE,CAAC,EAAGF,EAAIG,CAAC,CAAC,EAC3BuB,EAAM,KAAK,OAAO,IAAIb,CAAG,EAE/B,KAAK,OAAO,IAAIA,EAAK,KAAK,IAAIa,GAAO,EAAGJ,CAAK,CAAC,CAChD,CAEA,MAAO,CACL,KAAK,OAAO,MAAM,EAElB,IAAIlB,EAAQ,KAAK,MAAM,EAAI,EACrBuB,EAAO,KAAK,MAAM,EAAG,CAAC,EAE5B,QAASC,EAAI,EAAGA,EAAID,EAAMC,IACxB,KAAK,IACH,KAAK,EACL,KAAK,EACL,KAAK,MAAQD,EACbvB,GACC,KAAK,MAAM,EAAI,IAAO,CACzB,EACAA,GAAS,EAAI,KAAK,MAAM,EAAI,EAG9B,OAAW,CAACS,EAAKS,CAAK,IAAK,KAAK,OAAQ,CACtC,GAAM,CAACpB,EAAGC,CAAC,EAAIS,EAAMC,CAAG,EACxB,KAAK,EAAE,KAAK,SAASX,EAAGC,EAAG,IAAK,OAAW,KAAK,SAAS,IAAImB,CAAK,CAAC,CACrE,CACF,CAEA,IAAIpB,EAAWC,EAAWmB,EAAelB,EAAeyB,EAAe,CACrE,GAAIP,GAAS,EAAG,OAChB,KAAK,KAAKpB,EAAGC,EAAGmB,CAAK,EAErBlB,GAASyB,EACT,GAAM,CAACC,EAAIC,CAAE,EAAI9B,EAAUC,EAAGC,EAAGC,CAAK,EAEtC,GAAI,KAAK,MAAM,EAAI,GAAK,CAEtB,IAAM4B,EAAM,KAAK,MAAM,EACvBV,GAAS,GAET,KAAK,IAAIQ,EAAIC,EAAIT,EAAOlB,EAAQ4B,EAAK,CAACH,CAAK,EAC3CzB,GAAS4B,CACX,CAEA,IAAMC,EAAQ,KAAK,MAAM,EACzB,KAAK,IAAIH,EAAIC,EAAIT,EAAQW,EAAO7B,EAAOyB,CAAK,CAC9C,CACF,ECxGA,IAAAK,EAAyB,OAEzB,SAASC,EAAWC,EAAqB,CAIvC,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9CD,EAAO,YAAYC,CAAS,EAC5B,IAAMC,EAAW,IAAM,CAIrB,IAAMC,EAAa,KAAK,MAAM,OAAO,WAAa,GAAS,EACrDC,EAAc,KAAK,MAAM,OAAO,YAAc,GAAU,EACxDC,EAAQ,KAAK,IAAIF,EAAYC,CAAW,EAE9CH,EAAU,MAAM,MAAQ,GAAG,IAAYI,MACvCJ,EAAU,MAAM,OAAS,GAAG,IAAaI,KAC3C,EACA,OAAO,iBAAiB,SAAUH,CAAQ,EAC1CA,EAAS,EAET,IAAMI,EAAS,SAAS,cAAc,QAAQ,EAC9CL,EAAU,YAAYK,CAAM,EAE5B,IAAMC,EAAO,IAAI,WAASD,EAAQ,GAAM,GAAM,CAAE,OAAQ,EAAG,CAAC,EACtDE,EAAI,IAAIC,EAAOF,CAAI,EACzBC,EAAE,IAAI,IAAIE,EAAWF,EAAG,GAAO,EAAI,EAAG,GAAO,EAAI,CAAC,CAAC,EACnDA,EAAE,IACA,IAAIE,EACFF,EACC,GAAO,EAAK,EACb,GAAO,EAAI,EACX,GACA,IAAIG,EAAY,CACd,CAAC,EAAGC,CAAK,EACT,CAAC,EAAGC,CAAG,EACP,CAAC,EAAGC,CAAM,EACV,CAAC,EAAGC,CAAK,CACX,CAAC,CACH,CACF,EACAP,EAAE,IACA,IAAIE,EACFF,EACC,GAAO,EAAK,EAAI,EACjB,GAAO,EAAI,EACX,GACA,IAAIG,EAAY,CACd,CAAC,EAAGC,CAAK,EACT,CAAC,EAAGI,CAAK,EACT,CAAC,EAAGF,CAAM,EACV,CAAC,EAAGC,CAAK,CACX,CAAC,CACH,CACF,EACAP,EAAE,IAAI,IAAIS,EAAaV,EAAM,GAAO,EAAG,EAAG,oBAAoB,CAAC,CACjE,CAEA,OAAO,iBAAiB,OAAQ,IAAMR,EAAW,SAAS,IAAI,CAAC",
  "names": ["require_wglt", "__commonJSMin", "exports", "module", "Black", "Red", "Green", "Blue", "Yellow", "Cyan", "White", "import_wglt", "AnnoyingText", "term", "x", "y", "text", "import_wglt", "Engine", "term", "objects", "object", "thing", "import_wglt", "lerp", "x", "y", "a", "GradientRun", "points", "a", "b", "breakpoint", "rgb", "value", "low", "lowColour", "high", "highColour", "higherIndex", "p", "below", "ar", "ag", "ab", "above", "br", "bg", "bb", "r", "lerp", "int", "nextCoord", "x", "y", "angle", "sx", "sy", "ca", "sa", "cx", "cy", "getKey", "getXY", "key", "defaultGradient", "GradientRun", "Black", "Blue", "Cyan", "White", "PlasmaBall", "g", "power", "gradient", "min", "max", "old", "arcs", "i", "drift", "nx", "ny", "mod", "drain", "import_wglt", "loadEngine", "parent", "container", "onResize", "ratioWidth", "ratioHeight", "ratio", "canvas", "term", "g", "Engine", "PlasmaBall", "GradientRun", "Black", "Red", "Yellow", "White", "Green", "AnnoyingText"]
}
